<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Ruby Geocoder</title>
  <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/combo?3.3.0/build/cssfonts/fonts-min.css&3.3.0/build/cssreset/reset-min.css&3.3.0/build/cssgrids/grids-min.css&3.3.0/build/cssbase/base-min.css" />
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js" type="text/javascript"></script>
  <style>
    body { margin:auto; width:780px; color:#555; padding-bottom:40px; }
    h2, h3, h4 { color:#000; }
    h3 { margin-top:24px; font-size:131%; }
    h4 { margin-bottom:12px; }
    a { color:#555; }
    th, td { border:none; }
    code { color:#333; }
    dt { font-weight:bold; margin-top:18px; }
    input { border:1px solid #ccc; padding:2px; }
    fieldset { border:1px solid #ccc; padding:8px; }
    legend { font-size:85%; text-transform:uppercase; }
    .centered { text-align:center; }
    .annotation { font-size:85%; color:#EE127B; font-style:italic; }
    .block { margin-bottom:12px; }
    .filename { font-weight:bold; font-size:85%; }
    .separator { text-align:center; margin:24px 0; border-bottom:1px solid #EE127B; }
  </style>
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-3945186-12']);
    _gaq.push(['_trackPageview']);
    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>
</head>
<body>
<div class="yui3-g">
  <div class="yui3-u-5-12">

    <div class="centered">
      <img src="images/logo.large.png" alt="Ruby Geocoder" style="margin:90px 0 40px 0;" />
      <h2 style="font-weight:normal; color:#EE127B;">Complete Ruby geocoding solution.</h2>
      <p style="margin-top:26px">easy to use &bull; compatible with Ruby 1.8, 1.9, and JRuby &bull; result caching &bull; multi-lingual &bull; Google, Yahoo, Geocoder.ca, and FreeGeoIP geocoding services &bull; works with Rails, Sinatra, any Rack framework</p>
    </div>
    <dl style="margin:80px 0 0 68px">
      <dt>Install</dt>
      <dd><code>gem install geocoder</code></dd>

      <dt>Source code</dt>
      <dd><a href="http://github.com/alexreisner/geocoder">github.com</a></dd>

      <dt>API docs</dt>
      <dd><a href="http://rdoc.info/github/alexreisner/geocoder/master/frames">rdoc.info</a></dd>

      <!--
      <dt>Report issues</dt>
      <dd><a href="http://github.com/alexreisner/geocoder/issues">github.com/alexreisner/geocoder/issues</a></dd>
      -->
    </dl>

    <p class="centered" style="margin-top:90px">Also check out <a href="http://www.minutesandseconds.com/">Latitude/Longitude</a>, the band!</p>

  </div>
  <div class="yui3-u-7-12"><div style="padding-left:34px"><div style="border-top:2px solid #EE127B;">


<h3>Look up street addresses, IP addresses,<br />
  and geographic coordinates</h3>

<table>
  <tr>
    <td>"Eiffel Tower"<br /><span class="annotation">place name or address</span></td>
    <td>&rarr;</td>
    <td>48.8582, 2.2945<br /><span class="annotation">latitude, longitude</span></td>
  </tr>
  <tr>
    <td>44.9817, -93.2783<br /><span class="annotation">latitude, longitude</span></td>
    <td>&rarr;</td>
    <td>350 7th St N, Minneapolis, MN<br /><span class="annotation">street address</span></td>
  </tr>
  <tr>
    <td>24.193.83.1<br /><span class="annotation">IP address</span></td>
    <td>&rarr;</td>
    <td>40.728, -73.9453<br /><span class="annotation">latitude, longitude</span></td>
  </tr>
  <tr>
    <td>24.193.83.1<br /><span class="annotation">IP address</span></td>
    <td>&rarr;</td>
    <td>Brooklyn, NY, US<br /><span class="annotation">street address</span></td>
  </tr>
</table>


<h3>Perform geographic queries<br />
  on ActiveRecord objects<br />
  <span style="font-weight:normal">(Mongoid and DataMapper coming soon)</span></h3>

<p><code>Hotel.near(”Vancouver, Canada”)</code><br />
<span class="annotation">find hotels near Vancouver</span></p>

<p><code>@event.nearbys</code><br />
<span class="annotation">find other events near @event</span></p>

<p><code>@restaurant.distance_to(”Eiffel Tower”)</code><br />
<span class="annotation">find distance between Eiffel Tower and @restaurant</span></p>

<p><code>Geocoder::Calculations.geographic_center([<br />
  &nbsp;&nbsp;@brooklyn_bridge,<br />
  &nbsp;&nbsp;@chrysler_building,<br />
  &nbsp;&nbsp;@madison_square_garden])</code><br />
<span class="annotation">find geographic center of multiple places</span></p>


<h3>See it in action!</h3>

<form id="search-form">

  <fieldset>
    <legend>Your detected location</legend>
    <code>
      request.ip <%= '&nbsp;' * 13 %> # => "<strong id="user-ip"><%= request.ip %></strong>"<br />
      request.location.city &nbsp;&nbsp;&nbsp;# => "<strong id="user-city"></strong>"<br />
      request.location.country # => "<strong id="user-country"></strong>"<br />
    </code>
  </fieldset>

  <fieldset>
    <legend>Custom search</legend>
    <code>r = Geocoder.search(</code>
    <input type="text" id="search-query" name="search-query" style="width:180px" value="<%= random_search_query %>" />
    <code>)</code>
    <input type="submit" id="search-button" value="Go" />
    <br />
    <p class="annotation">Enter a street address, IP address, or latitude/longitude coordinates.</p>
    <div id="search-result" style="display:none;">
      <code>
        r.latitude &nbsp;# => <strong id="result-latitude"></strong><br />
        r.longitude # => <strong id="result-longitude"></strong><br />
        r.address &nbsp;&nbsp;# => "<strong id="result-address"></strong>"
      </code><br /><br />
    </div>
  </fieldset>
</form>
<script>
function mapWidth(){ return 400; }
function mapHeight(){ return 130; }
function mapUrl(address, coords) {
  var params = {
    size   : mapWidth() + "x" + mapHeight(),
    maptype: "roadmap",
    sensor : "false",
    center : coords.join(','),
    zoom   : 12,
    style  : "feature:all|element:all|saturation:-100",
    markers: "color:0xEE127B|" + coords.join(',')
  }
  return "http://maps.google.com/maps/api/staticmap?" + $.param(params);
}
function updateMap(src) {
  var id = 'result-map';
  if ($('#' + id).length == 0) { // create if doesn't exist
    $('#search-result').append('<img width = "' + mapWidth() +
      '" height="' + mapHeight() + '" id="' + id + '" src="' + src + '" />');
  } else {
    $('#' + id).attr('src', src);
  }
}
$('#search-form').submit(function(e){
  e.preventDefault();
  if (!$('#search-result').is(':visible'))
    $('#search-result').slideDown();
  $.getJSON('/locations/search', {"query": $('#search-query').val()}, function(data){
    $('#result-latitude').html(data.coordinates[0]);
    $('#result-longitude').html(data.coordinates[1]);
    $('#result-address').html(data.address);
    updateMap(mapUrl(data.address, data.coordinates));
  });
});
$(function(){
  $.getJSON('/locations/search', {"query": $('#user-ip').html()}, function(data){
    $('#user-country').html(data.country);
    $('#user-city').html(data.city);
  });
});
</script>

<div id="results"></div>


<h3>Use in Rails</h3>

<h4>Simple Geocoding by Street Address</h4>
<p>Given a <code>Venue</code> model with known street address, automatically fetch coordinates after validation and store in <code>latitude</code> and <code>longitude</code> attributes:</p>
<div class="block"><code>
  <span class="filename"># app/models/venue.rb</span><br />
  geocoded_by :address<br />
  after_validation :geocode
</code></div>


<%= separator %>


<h4>Simple Geocoding by IP Address</h4>
<p>Given a <code>User</code> model with known IP address, automatically fetch coordinates and store in <code>lat</code> and <code>lon</code> attributes:</p>
<div class="block"><code>
  <span class="filename"># app/models/user.rb</span><br />
  geocoded_by :ip_address,<br />
  &nbsp;&nbsp;:latitude => :lat, :longitude => :lon<br />
  after_validation :geocode
</code></div>


<%= separator %>


<h4>Simple Reverse Geocoding by Coordinates</h4>
<p>Given a <code>Place</code> model with known latitude/longitude coordinates, automatically fetch address and store in <code>location</code> attribute (stored in <code>address</code> attribute if <code>:address</code> option omitted):</p>
<div class="block"><code>
  <span class="filename"># app/models/place.rb</span><br />
  reverse_geocoded_by :latitude, :longitude,<br />
  &nbsp;&nbsp;:address => :location<br />
  after_validation :reverse_geocode
</code></div>


<%= separator %>


<h4>Only Geocode When Attributes Have Changed</h4>
<p>Only look up coordinates if address changed since last save:</p>
<div class="block"><code>
  <span class="filename"># app/models/venue.rb</span><br />
  geocoded_by :address<br />
  after_validation :geocode,<br />
  &nbsp;&nbsp;:if => lambda{ |obj| obj.address_changed? }
</code></div>


<%= separator %>


<h4>Custom Handling of Detailed Geocoding Results</h4>
<p>Given a <code>Place</code> model with known latitude/longitude coordinates, automatically fetch address components and store in separate attributes:</p>
<div class="block"><code>
  <span class="filename"># app/models/place.rb</span><br />
  reverse_geocoded_by :lat, :lon do |obj,geo|<br />
  &nbsp;&nbsp;obj.city &nbsp;&nbsp;&nbsp;= geo.city<br />
  &nbsp;&nbsp;obj.zipcode = geo.postal_code<br />
  &nbsp;&nbsp;obj.country = geo.country_code<br />
  end<br />
  after_validation :reverse_geocode
</code></div>


<%= separator %>


<h4>Forward and Reverse Geocoding on Same Model</h4>
<p>Given a <code>Place</code> model, objects of which sometimes have a street address and sometimes have coordinates, automatically fetch and fill in whatever's missing, based on what's provided:</p>
<div class="block"><code>
  <span class="filename"># app/models/place.rb</span><br />
  geocoded_by :address<br />
  reverse_geocoded_by :latitude, :longitude<br />
  after_validation :geocode, :reverse_geocode
</code></div>


<%= separator %>


<h3>Use in Any Rack-Based Framework</h3>

<h4>Detect Location of HTTP Request</h4>
<p>Get current user's city and country (using IP address). A <code>location</code> method is added to the standard <code>Rack::Request</code> which returns a <code>Geocoder::Result object</code>:</p>
<div class="block"><code>
  <span class="filename"># Rails controller or Sinatra app</span><br />
  city = request.location.city<br />
  country = request.location.country_code
</code></div>


<%= separator %>


<h3>Use Outside of Any Framework</h3>

<h4>Search Geocoding API</h4>
<p>Search for geographic information about a street address, IP address, or set of coordinates (<code>Geocoder.search</code> returns a <code>Geocoder::Result</code> object):</p>
<div class="block"><code>
  result = Geocoder.search("1 Twins Way, Minneapolis")<br />
  result = Geocoder.search("44.981667,-93.27833")<br />
  result = Geocoder.search("204.57.220.1")
</code></div>


  </div></div></div>
</div>

<div class="centered">
  <p style="margin-top:50px">Geocoder gem and this web site by Alex Reisner.</p>
  <a href="http://code.alexreisner.com">blog</a>
  <a href="http://github.com/alexreisner">code</a>
  <a href="http://www.alexreisner.com">personal</a>
  <a href="http://www.worldsfastestanimal.com">business</a>
</div>

</body>
</html>
