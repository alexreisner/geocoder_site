---
title: Welcome to Middleman
---

<div class="yui3-g">
  <div class="yui3-u-5-12">
    <div class="centered">
      <%= image_tag "logo.large.png", alt: "Ruby Geocoder", style: "margin:90px 0 40px 0;" %>
      <h2 style="font-weight:normal; color:#EE127B;">Complete Ruby geocoding solution.</h2>
      <p style="margin-top:26px">easy to use &bull; supports Ruby 1.8 - 2.1, JRuby, Rubinius &bull; compatible with ActiveRecord, Mongoid, MongoMapper &bull; result caching &bull; proxy support &bull; multi-lingual &bull; Google, Yahoo, Bing, Nominatim, Yandex.ru, FreeGeoIP, MaxMind, and more &bull; works with Rails, Sinatra, any Rack framework &bull; command line interface</p>
    </div>
    <dl style="margin:80px 0 0 68px">
      <dt>Tutorial video</dt>
      <dd><a href="http://railscasts.com/episodes/273-geocoder">Railscast #273</a></dd>

      <dt>Install</dt>
      <dd><code>gem install geocoder</code></dd>

      <dt>Source code</dt>
      <dd><a href="http://github.com/alexreisner/geocoder">github.com</a></dd>

      <dt>API docs</dt>
      <dd><a href="http://rdoc.info/github/alexreisner/geocoder/master/frames">rdoc.info</a></dd>

      <dt>Contribute</dt>
      <dd><a href="http://github.com/alexreisner/geocoder/issues">github issues</a></dd>
    </dl>

  </div>
  <div class="yui3-u-7-12"><div style="padding-left:34px"><div style="border-top:2px solid #EE127B;">


<h3>Look up street addresses, IP addresses,<br />
  and geographic coordinates</h3>

<table>
  <tr>
    <td>"Eiffel Tower"<br /><span class="annotation">place name or address</span></td>
    <td>&rarr;</td>
    <td>48.8582, 2.2945<br /><span class="annotation">latitude, longitude</span></td>
  </tr>
  <tr>
    <td>44.9817, -93.2783<br /><span class="annotation">latitude, longitude</span></td>
    <td>&rarr;</td>
    <td>350 7th St N, Minneapolis, MN<br /><span class="annotation">street address</span></td>
  </tr>
  <tr>
    <td>24.193.83.1<br /><span class="annotation">IP address</span></td>
    <td>&rarr;</td>
    <td>Brooklyn, NY, US<br /><span class="annotation">street address</span></td>
  </tr>
</table>


<h3>Perform geographic queries using objects</h3>

<p><code>Hotel.near(”Vancouver, Canada”)</code><br />
<span class="annotation">find hotels near Vancouver</span></p>

<p><code>@event.nearbys</code><br />
<span class="annotation">find other events near @event</span></p>

<p><code>@restaurant.distance_to(”Eiffel Tower”)</code><br />
<span class="annotation">find distance from @restaurant to Eiffel Tower</span></p>

<p><code>@restaurant.bearing_to(”Eiffel Tower”)</code><br />
<span class="annotation">find direction from @restaurant to Eiffel Tower</span></p>

<p><code>Geocoder::Calculations.geographic_center([<br />
  &nbsp;&nbsp;@brooklyn_bridge,<br />
  &nbsp;&nbsp;@chrysler_building,<br />
  &nbsp;&nbsp;@madison_square_garden])</code><br />
<span class="annotation">find geographic center of multiple places</span></p>


<h3>ActiveRecord Examples</h3>

<p style="margin-bottom:24px">(Mongoid and MongoMapper are very similar; please see <a href="http://github.com/alexreisner/geocoder#readme">README</a> for details.)</p>

<h4>Simple Geocoding by Street Address</h4>
<p>Given a <code>Venue</code> model with known street address, automatically fetch coordinates after validation and store in <code>latitude</code> and <code>longitude</code> attributes:</p>
<div class="block"><code>
  <span class="filename"># app/models/venue.rb</span><br />
  geocoded_by :address<br />
  after_validation :geocode
</code></div>


<%= separator %>


<h4>Simple Geocoding by IP Address</h4>
<p>Given a <code>User</code> model with known IP address, automatically fetch coordinates and store in <code>lat</code> and <code>lon</code> attributes:</p>
<div class="block"><code>
  <span class="filename"># app/models/user.rb</span><br />
  geocoded_by :ip_address,<br />
  &nbsp;&nbsp;:latitude => :lat, :longitude => :lon<br />
  after_validation :geocode
</code></div>


<%= separator %>


<h4>Simple Reverse Geocoding by Coordinates</h4>
<p>Given a <code>Place</code> model with known latitude/longitude coordinates, automatically fetch address and store in <code>location</code> attribute (stored in <code>address</code> attribute if <code>:address</code> option omitted):</p>
<div class="block"><code>
  <span class="filename"># app/models/place.rb</span><br />
  reverse_geocoded_by :latitude, :longitude,<br />
  &nbsp;&nbsp;:address => :location<br />
  after_validation :reverse_geocode
</code></div>


<%= separator %>


<h4>Only Geocode When Attributes Have Changed</h4>
<p>Only look up coordinates if address changed since last save:</p>
<div class="block"><code>
  <span class="filename"># app/models/venue.rb</span><br />
  geocoded_by :address<br />
  after_validation :geocode,<br />
  &nbsp;&nbsp;:if => lambda{ |obj| obj.address_changed? }
</code></div>


<%= separator %>


<h4>Custom Handling of Detailed Reverse Geocoding Results</h4>
<p>Given a <code>Place</code> model with known latitude/longitude coordinates, automatically fetch address components and store in separate attributes:</p>
<div class="block"><code>
  <span class="filename"># app/models/place.rb</span><br />
  reverse_geocoded_by :lat, :lon do |obj,results|<br />
  &nbsp;&nbsp;if geo = results.first<br />
  &nbsp;&nbsp;&nbsp;&nbsp;obj.city &nbsp;&nbsp;&nbsp;= geo.city<br />
  &nbsp;&nbsp;&nbsp;&nbsp;obj.zipcode = geo.postal_code<br />
  &nbsp;&nbsp;&nbsp;&nbsp;obj.country = geo.country_code<br />
  &nbsp;&nbsp;end<br />
  end<br />
  after_validation :reverse_geocode
</code></div>


<%= separator %>


<h4>Forward and Reverse Geocoding on Same Model</h4>
<p>Given a <code>Place</code> model, objects of which sometimes have a street address and sometimes have coordinates, automatically fetch and fill in whatever's missing, based on what's provided:</p>
<div class="block"><code>
  <span class="filename"># app/models/place.rb</span><br />
  geocoded_by :address<br />
  reverse_geocoded_by :latitude, :longitude<br />
  after_validation :geocode, :reverse_geocode
</code></div>


<%= separator %>


<h4>Find the Bearing (Direction) Between Places</h4>
<p>Given a <code>Place</code> model with geocoded objects, find the distance and direction of the closest ones:</p>
<div class="block"><code>
  nearbys = Place.near("Omaha, NE", 50,<br />
  &nbsp;&nbsp;:order =&gt; "distance")<br />
  bearing = nearbys.first.bearing # =&gt; 46.12<br />
  Geocoder::Calculations.compass_point(<br />
  &nbsp;&nbsp;bearing) # =&gt; "NE"
</code></div>

<p>The <code>bearing</code> attribute is a number between 0 and 360 indicating the number of degrees clockwise from due North (eg: 180 = South, 270 = West).</p>


<%= separator %>


<h3>In Any Rack-Based Framework</h3>

<h4>Detect Location of HTTP Request</h4>
<p>Get current user's city and country (using IP address). A <code>location</code> method is added to the standard <code>Rack::Request</code> which returns a <code>Geocoder::Result object</code>:</p>
<div class="block"><code>
  <span class="filename"># Rails controller or Sinatra app</span><br />
  city = request.location.city<br />
  country = request.location.country_code
</code></div>


<%= separator %>


<h3>Outside of Any Framework</h3>

<h4>Search Geocoding API</h4>
<p>Search for geographic information about a street address, IP address, or set of coordinates (<code>Geocoder.search</code> returns an array of <code>Geocoder::Result</code> objects):</p>
<div class="block"><code>
  Geocoder.search("1 Twins Way, Minneapolis")<br />
  Geocoder.search("44.981667,-93.27833")<br />
  Geocoder.search("204.57.220.1")
</code></div>


<%= separator %>


<h3>Command Line Interface</h3>

<h4>Search Geocoding API</h4>
<p>The command line interface works just like the <code>Geocoder.search</code> method and allows you to set various configuration options like geocoding service, language, etc. You can also get the raw JSON response (or URL) from the geocoding API:</p>
<div class="block"><code>
  <strong>$ geocode -s geocoder_ca "44.981667,-93.27833"</strong><br />
  Latitude:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44.981165<br />
  Longitude:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-93.279225<br />
  Full address:&nbsp;&nbsp;&nbsp;&nbsp;380 7th St N, Minneapolis, ...<br />
  City:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Minneapolis<br />
  State/province:&nbsp;&nbsp;MN<br />
  Postal code:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;55403<br />
  Country:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;United States<br />
  Google map:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://maps.google.com/maps?...<br />
  <br />
  <strong>$ geocode --json "1 Twins Way, Minneapolis"</strong><br />
  {<br />
  &nbsp;&nbsp;"status": "OK",<br />
  &nbsp;&nbsp;"results": [ {<br />
  &nbsp;&nbsp;&nbsp;&nbsp;"types": [ "street_address" ],<br />
  &nbsp;&nbsp;&nbsp;&nbsp;"formatted_address": "536 1/2 N 3rd St...",<br />
  &nbsp;&nbsp;&nbsp;&nbsp;...<br />
  &nbsp;&nbsp;} ]<br />
  }
</code></div>

<p>For details see <code>geocode -h</code>.

  </div></div></div>
</div>

    <div class="centered">
      <p style="margin-top:50px">Geocoder gem and this web site by Alex Reisner.</p>
      <a href="http://code.alexreisner.com">blog</a>
      <a href="http://github.com/alexreisner">code</a>
      <a href="http://www.alexreisner.com">personal</a>
      <a href="http://www.worldsfastestanimal.com">business</a>
    </div>
  </div>
</div>
